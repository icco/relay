package parse

import (
	"encoding/json"
	"fmt"

	"go.uber.org/zap"
)

// Sonarr is the structure of messages we get from Sonarr.
//
// Generated by https://mholt.github.io/json-to-go/
type Sonarr struct {
	Episodes []struct {
		ID             int    `json:"id"`
		EpisodeNumber  int    `json:"episodeNumber"`
		SeasonNumber   int    `json:"seasonNumber"`
		Title          string `json:"title"`
		QualityVersion int    `json:"qualityVersion"`
	} `json:"episodes"`
	EventType string `json:"eventType"`
	Series    struct {
		ID     int    `json:"id"`
		Title  string `json:"title"`
		Path   string `json:"path"`
		TvdbID int    `json:"tvdbId"`
	} `json:"series"`
}

func jsonToSonarr(buf []byte) DataType {
	var data Sonarr
	if err := json.Unmarshal(buf, &data); err != nil {
		log.Debugw("decoding json to Sonarr", zap.Error(err))
		return nil
	}
	log.Debugw("Sonarr data decoded", "data", data)

	return &data
}

// Message returns a string representation of this object for human consumption.
func (j *Sonarr) Message() string {
	var msg string
	for _, ep := range j.Episodes {
		msg += fmt.Sprintf("Sonarr: %s %dx%02d - %q\n", j.Series.Title, ep.SeasonNumber, ep.EpisodeNumber, j.EventType)
	}

	return msg
}

// Valid checks that the data is good.
func (j *Sonarr) Valid() bool {
	return j.EventType != "" && len(j.Episodes) > 0
}
