package lib

import (
	"encoding/json"
	"fmt"

	"go.uber.org/zap"
)

// GitLabPush is a parse from a GitLab webhook event.
//
// TODO(icco): Test on event types besides push.
//
// Generated by https://mholt.github.io/json-to-go/
type GitLabPush struct {
	ObjectKind    string `json:"object_kind"`
	EventName     string `json:"event_name"`
	Before        string `json:"before"`
	After         string `json:"after"`
	Ref           string `json:"ref"`
	CheckoutSha   string `json:"checkout_sha"`
	CommitMessage string `json:"message"`
	UserID        int    `json:"user_id"`
	UserName      string `json:"user_name"`
	UserUsername  string `json:"user_username"`
	UserEmail     string `json:"user_email"`
	UserAvatar    string `json:"user_avatar"`
	ProjectID     int    `json:"project_id"`
	Project       struct {
		ID                int    `json:"id"`
		Name              string `json:"name"`
		Description       string `json:"description"`
		WebURL            string `json:"web_url"`
		AvatarURL         string `json:"avatar_url"`
		GitSSHURL         string `json:"git_ssh_url"`
		GitHTTPURL        string `json:"git_http_url"`
		Namespace         string `json:"namespace"`
		VisibilityLevel   int    `json:"visibility_level"`
		PathWithNamespace string `json:"path_with_namespace"`
		DefaultBranch     string `json:"default_branch"`
		CiConfigPath      string `json:"ci_config_path"`
		Homepage          string `json:"homepage"`
		URL               string `json:"url"`
		SSHURL            string `json:"ssh_url"`
		HTTPURL           string `json:"http_url"`
	} `json:"project"`
	Commits []struct {
		ID        string `json:"id"`
		Message   string `json:"message"`
		Title     string `json:"title"`
		Timestamp string `json:"timestamp"`
		URL       string `json:"url"`
		Author    struct {
			Name  string `json:"name"`
			Email string `json:"email"`
		} `json:"author"`
		Added    []string `json:"added"`
		Modified []string `json:"modified"`
		Removed  []string `json:"removed"`
	} `json:"commits"`
	TotalCommitsCount int `json:"total_commits_count"`
	PushOptions       struct {
	} `json:"push_options"`
	Repository struct {
		Name            string `json:"name"`
		URL             string `json:"url"`
		Description     string `json:"description"`
		Homepage        string `json:"homepage"`
		GitHTTPURL      string `json:"git_http_url"`
		GitSSHURL       string `json:"git_ssh_url"`
		VisibilityLevel int    `json:"visibility_level"`
	} `json:"repository"`
}

func jsonToGitLabPush(buf []byte) DataType {
	var data GitLabPush
	if err := json.Unmarshal(buf, &data); err != nil {
		log.Warnw("decoding json to GitLabPush", zap.Error(err))
		return nil
	}
	log.Debugw("GitLabPush data decoded", "data", data)

	return &data
}

// Message returns a string representation of this object for human consumption.
func (j *GitLabPush) Message() string {
	commits := ""
	for _, c := range j.Commits {
		commits += fmt.Sprintf(" - %q @ %v %s\n", c.Author.Name, c.Timestamp, c.URL)
	}
	return fmt.Sprintf("GitLab %s to %s: \n%s", j.EventName, j.Project.Name, commits)
}

// Valid checks that the data is good.
func (j *GitLabPush) Valid() bool {
	return len(j.Commits) > 0 && j.EventName == "push"
}
