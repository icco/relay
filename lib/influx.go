package lib

import (
	"encoding/json"
	"fmt"
	"time"

	"go.uber.org/zap"
)

// Influx maps the alerts sent from the hosted cloud version of the TICK stack.
//
// Generated by https://mholt.github.io/json-to-go/
type Influx struct {
	CheckID                  string    `json:"_check_id"`
	CheckName                string    `json:"_check_name"`
	Level                    string    `json:"_level"`
	Measurement              string    `json:"_measurement"`
	AlertMessage             string    `json:"_message"`
	NotificationEndpointID   string    `json:"_notification_endpoint_id"`
	NotificationEndpointName string    `json:"_notification_endpoint_name"`
	NotificationRuleID       string    `json:"_notification_rule_id"`
	NotificationRuleName     string    `json:"_notification_rule_name"`
	SourceMeasurement        string    `json:"_source_measurement"`
	SourceTimestamp          int64     `json:"_source_timestamp"`
	Start                    time.Time `json:"_start"`
	StatusTimestamp          int64     `json:"_status_timestamp"`
	Stop                     time.Time `json:"_stop"`
	Time                     time.Time `json:"_time"`
	Type                     string    `json:"_type"`
	Version                  int       `json:"_version"`
}

func jsonToInflux(buf []byte) DataType {
	var data Influx
	if err := json.Unmarshal(buf, &data); err != nil {
		log.Debugw("decoding json to Influx", zap.Error(err))
		return nil
	}
	log.Debugw("Influx data decoded", "data", data)

	return &data
}

// Message returns a string representation of this object for human consumption.
func (j *Influx) Message() string {
	return fmt.Sprintf("TICK Alert: %q", j.AlertMessage)
}

// Valid checks that the data is good.
func (j *Influx) Valid() bool {
	return j.AlertMessage != ""
}
